// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(references: [email], fields: [email])
@@map("admins")
}

model Doctors {
  id String @id @default(uuid())
  name String
  email String @unique
  profilePhoto String?
  contactNumber String
  address String?
  registrationNumber String
  experience Int @default(0)
  gender Gender
  appointmentFee Int
  qualification String
  currentWorkingPlace String
  designation String
  avagereRating String
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(references: [email], fields: [email])
  doctorSpecialties DoctorSpecialties[]
  @@map("doctors")
}
model Patient {
  id            String   @id @unique @default(uuid())
  email         String   @unique
  name          String
  profilePhoto  String?
  contactNumber String?
  address       String?
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User @relation(references: [email], fields: [email])
  @@map("patient")
}

model Specialties{
  id String @id @default(uuid())
  title String
  icon String
  doctorSpecialties DoctorSpecialties[]
  @@map("specialties")
}

model DoctorSpecialties{
  specialitiesId String
  specialties Specialties @relation(fields: [specialitiesId], references: [id])
  doctorId String
  doctor Doctors @relation(fields: [doctorId], references: [id])

@@id([specialitiesId, doctorId])
@@map("doctors-specialties")
}



model User {
  id String @id @default(uuid())
  email String @unique
  password String
  role UserRole
  needPasswordChange Boolean @default(false)
  status UserStatus @default(ACTIVE)
  admin Admin?
  doctor Doctors?
  patient Patient?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


@@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT

}
enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}
enum Gender {
  MALE
  FEMALE
  OTHERS
}